===================
Hidden token 1
===================

10 FOR A = (LOFT) OR LEFT TO 15: REM OK
20 FOR A = LOFT OR LEFT TO 15: REM ERR

---

(source_file
	(line
		(linenum)
		(statement
			(tok_for) (var_real (name_real)) (tok_eq) (binary_aexpr (var_real (name_real)) (tok_or) (var_real (name_real))) (tok_to) (int))
		(statement
			(tok_rem) (comment_text)))
	(line
		(linenum)
		(statement
			(tok_for) (var_real (name_real)) (tok_eq) (var_real (name_real)) (tok_to) (var_real (name_real)))
		(ERROR (tok_to) (int))
		(statement
			(tok_rem) (comment_text))))

===================
Hidden token 2
===================

10 IF B = (A) THEN 100: REM OK
20 IF B = A THEN 100: REM ERR

---

(source_file
	(line
		(linenum)
		(statement
			(tok_if) (binary_aexpr (var_real (name_real)) (tok_eq) (var_real (name_real))) (tok_then) (linenum))
		(statement
			(tok_rem) (comment_text)))
	(line
		(linenum)
		(ERROR (tok_if)
			(binary_aexpr
				(var_real (name_real))
				(tok_eq)
				(ERROR (tok_at))
				(var_real (name_real))))
		(statement
			(tok_rem) (comment_text))))

===================
Disjoint tokens
===================

10 AB = 1 0 : P RI NT AB
20 IFX1THEN20
30 I F X 1 T H E N 3 0

---

(source_file
	(line
		(linenum)
		(statement
			(assignment (var_real (name_real)) (tok_eq) (int)))
		(statement
			(tok_print) (var_real (name_real))))
	(line
		(linenum)
		(statement (tok_if) (var_real (name_real)) (tok_then) (linenum)))
	(line
		(linenum)
		(statement (tok_if) (var_real (name_real)) (tok_then) (linenum))))

===================
AT and ATN
===================

100 HLIN 1,ATN(X) AT 5: REM OK
110 HLIN 1,AT N(X) AT 5: REM ERR

---

(source_file
	(line
		(linenum)
		(statement
			(tok_hlin) (int) (fcall (tok_atn) (var_real (name_real))) (tok_at) (int))
		(statement
			(tok_rem) (comment_text)))
	(line
		(linenum)
		(statement
			(tok_hlin) (int) (ERROR (tok_at)) (var_real (name_real) (subscript (var_real (name_real)))) (tok_at) (int))
		(statement
			(tok_rem) (comment_text))))

===================
AT and TO
===================

100 FOR I = (A) TO B: REM OK
100 FOR I = A TO B: REM ALSO OK

---

(source_file
	(line
		(linenum)
		(statement
			(tok_for) (var_real (name_real)) (tok_eq) (var_real (name_real)) (tok_to) (var_real (name_real)))
		(statement
			(tok_rem) (comment_text)))
	(line
		(linenum)
		(statement
			(tok_for) (var_real (name_real)) (tok_eq) (var_real (name_real)) (tok_to) (var_real (name_real)))
		(statement
			(tok_rem) (comment_text))))

===================
Terminal Strings
===================

10 PRINT "HELLO";::: PRINT " WORLD!
11 ::::PRINT "HI
20 DATA ,,HELLO "world,,,"WORLD,WORLD
30 & "100

---

(source_file
	(line
		(linenum)
		(statement (tok_print) (str))
		(terminal_statement (tok_print) (terminal_str)))
	(line
		(linenum)
		(terminal_statement (tok_print) (terminal_str)))
	(line
		(linenum)
		(terminal_statement (tok_data) (data_literal) (terminal_str)))
	(line
		(linenum)
		(terminal_statement (tok_amp) (terminal_str))))

===================
Alternative PRINT
===================

10 ? "HELLO";: ? " WORLD!

---

(source_file
	(line
		(linenum)
		(statement (tok_print) (str))
		(terminal_statement (tok_print) (terminal_str))))

===================
Control Characters
===================

100 PRINT "SOUND BELL"
110 DATA "HELLO","",HE"LLO"

---

(source_file
	(line
		(linenum)
		(statement (tok_print) (str)))
	(line
		(linenum)
		(statement (tok_data) (data_literal) (data_str) (data_literal))))

===================
Ampersand Call
===================

100 & "string argument"
110 & (X+Y,"hello",CHR$(X))

---

(source_file
	(line
		(linenum)
		(statement (tok_amp) (str)))
	(line
		(linenum)
		(statement
			(tok_amp)
			(binary_aexpr
				(var_real (name_real)) (tok_plus) (var_real (name_real)))
			(str)
			(sfcall (tok_chr) (var_real (name_real))))))

===================
CHAIN Pattern
===================

100 CALL 520"NEXT PROGRAM"
110 CALL 520"PART TWO

---

(source_file
	(line
		(linenum)
		(statement (tok_call) (int) (str)))
	(line
		(linenum)
		(terminal_statement (tok_call) (int) (terminal_str))))